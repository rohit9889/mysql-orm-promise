{
  "name": "node-mysql-promise",
  "version": "0.0.5",
  "description": "node mysql model based on promise",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ffttpp/node-mysql-promise.git"
  },
  "keywords": [
    "node-mysql",
    "promise",
    "mysql-pool",
    "parse-sql"
  ],
  "author": {
    "name": "ffttpp"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/ffttpp/node-mysql-promise/issues"
  },
  "homepage": "https://github.com/ffttpp/node-mysql-promise",
  "dependencies": {
    "es6-promise": "^2.0.1",
    "mysql": "^2.5.4"
  },
  "readme": "# node-mysql-promise\n\n\n## Install\n\t$ npm install node-mysql-promise\n\t\n## Introduction\nnode mysql操作封装类，基于promise，借鉴75team开源项目thinkjs中model操作，数据库连接使用node-mysql的连接池。\n### 使用示例\n\n```js\nvar Mysql = require('node-mysql-promise');\nvar mysql = Mysql.createConnection({\n\thost        : 'localhost',\n\tuser        : 'username',\n\tpassword    : 'password'\n});\n//SELECT * FROM table;\nmysql.table('table').select().then(function (data) {\n\tconsole.log(data);\n}).catch(function (e) {\n\tconsole.log(e);\n});\n```\n\t\n\n##API\n### 配置\n* `host`: 连接的host（默认: localhost）\n* `port`: 连接端口\n* `user`: 用户名\n* `password`: 密码\n* `database`: 数据库名\n* `charset`: 编码（默认: UTF8_GENERAL_CI）\n* `timezone`: 时区（默认: 'local'）\n* `connectTimeout`: 连接超时时间（默认: 10000）\n* `connectionLimit`: 最大连接数（默认: 10）\n* `logSql`: 控制台输出sql（默认: false）\n\n### 方法\n\n##### table(tableName)\n设置要查询的表（必需）\n\n* `tableName` String 要查询的表\n* `return` this\n\n```js\n//SELECT * FROM `table`\nmysql.table('table').select()\n```\n\n\n#### field(field, reverse)\n设置要查询的字段\n\n* `field` String|Array 要查询的字段，可以是字符串，也可以是数组\n* `reverse` Boolean 是否反选字段\n* `return` this\n\n```js\n//SELECT * FROM `table`\nmysql.table('table').field().select();\n//SELECT `id`, `title` FROM `table`\nmysql.table('table').field('id, title').select();\n//SELECT `id`, `title` FROM `table`\nmysql.table(['id', 'title']).select();\n//SELECT `author`, `date` FROM `table`\nmysql.table('table').field(['id', 'title'], true).select();\n```\n\t\t\n\t\t\n#### limit(offset, length)\n\n设置查询的数量\n* `offset` Number 起始位置\n* `length` Number 查询的数目\n* `return` this\n\n```js\n//SELECT * FROM `table` LIMIT 10\nmysql.table('table').limit(10).select();\n//SELECT * FROM `table` LIMIT 10, 20\nmysql.table('table').limit(10, 20).select();\n```\n\t\t\n#### page(page, listRows)\n设置当前查询的页数，页数从1开始\n\n* `page` Number 当前的页数\n* `listRows` Number 一页记录条数，默认20条\n* `return` this\n\n```js\n//SELECT * FROM `table`\nmysql.table('table').page().select();\n//SELECT * FROM `table` LIMIT 0,20\nmysql.table('table').page(1).select();\n//SELECT * FROM `table` LIMIT 10, 20\nmysql.table('table').page(2, 10).select();\n```\n\t\t\n#### union(union, all)\n联合查询\n\n* `union` String 联合查询的字符串\n* `all` 是否为UNION ALL模式\n* `return` this\n\n```js\n//SELECT * FROM `table` UNION (SELECT * FROM `table2`)\nmysql.table('table').union('SELECT * FROM `table2`').select();\n//SELECT * FROM `table` UNION ALL (SELECT * FROM `table2`)\nmysql.table('table').union('SELECT * FROM `table2`', true).select();\n//SELECT * FROM `table` UNION ALL (SELECT * FROM `table2`)\nmysql.table('table').union({table: 'table2'}, true);\n//SELECT * FROM `table` UNION ALL (SELECT * FROM `table2`) UNION (SELECT * FROM `table3`)\nmysql.table('table').UNION({table: 'table2`}, true).union({table: 'table3'});\n```\n\t\t\n\n#### join(join)\n组合查询\n\n* `join` String|Array|Object\n* `return` this\n\n```js\n//SELECT * FROM `table` LEFT JOIN `table2` ON table.id = table2.id\nmysql.table('table').join('table2 on table.id = table2.id').select();\n//SELECT * FROM `table` LEFT JOIN `table2` ON table.id = table2.id RIGHT JOIN `table3` ON table.sid = table3.sid\nmysql.table('table').join('table2 ON table.id = table2.id', 'RIGHT JOIN table3 ON table.sid = table3.sid').select();\n//SELECT * FROM `table` INNER JOIN `table2` on table.id = table2.id\nmysql.table('table').join({\n\ttable: 'table2',\n\tjoin: 'inner',//left, right, inner三种方式\n\tas: 'c' //表别名\n\ton: ['id', 'id'] //ON 条件\n}).select();\n//SELECT * FROM `table` AS a LEFT JOIN `table2` AS b ON a.id = b.id LEFT JOIN `table3` AS c ON a.sid = c.sid\nmysql.table('table').alias('a').join({\n\ttable: 'table2',\n\tjoin: 'left',\n\tas: 'b'\n\ton: ['id', 'id']\n}).join({\n\ttable: 'table3',\n\tjoin: 'left',\n\tas: 'c',\n\ton: ['sid', 'sid']\n}).select();\t\t\n//SELECT * FROM `table` AS a LEFT JOIN `table2` AS b ON a.id = b.id LEFT JOIN `table3` AS c ON a.sid = c.sid\nmysql.table('table').join({\n\ttable2: {\n\t\tjoin: 'left',\n\t\tas: 'b',\n\t\ton: ['id', 'id']\n\t},\n\ttable3: {\n\t\tjoin: 'left',\n\t\tas: 'c',\n\t\ton: ['sid', 'sid']\n\t}\n}).select();\t\t\n//SELECT * FROM `table` LEFT JOIN `table2` ON table.id = table2.id LEFT JOIN `table3` ON (table.sid = table3.sid AND table.name = table3.title);\nmysql.table('table').join({\n\ttable2: {\n\t\ton: ['id', 'id']\n\t},\n\ttable3: {\n\t\ton: {\n\t\t\tid: 'id',\n\t\t\ttitle: 'name'\n\t\t}\n\t}\n}).select();\n```\n\t\t\n#### order(order)\n设置排序方式\n\n* `order`  String|Array|Obeject 排序方式\n* `return` this\n\n```js\n//SELECT * FROM `table` ORDER BY `id`\nmysql.table('table').order('id').select();\t\t\n//SELECT * FROM `table` ORDER BY `id` DESC\nmysql.table('table').order('id DESC').select();\n//SELECT * FROM `table` ORDER BY `id` DESC, `title` ASC\nmysql.table('table').order('id DESC, title ASC').select();\n//SELECT * FROM `table` ORDER BY `id` DESC, `title` ASC\nmysql.table('table').order(['id DESC', 'title ASC']).select();\n//SELECT * FROM `table` ORDER BY `id` DESC `title` ASC\nmysql.table('table').order({id: 'DESC', title: 'ASC'}).select();\n```\n\t\t\n#### alias(alias)\n设置表别名\n\n* `alias` String 表别名\n* `return` this\n\n```js\n//SELECT * FROM `table` AS t\nmysql.table('table').alias('t').select();\n```\n\t\t\n#### having(str)\nhaving查询\n\n* `str` String having查询的字符串\n* `return` this\n\n```js\n//SELECT * FROM `table` HAVING `id` > 1 AND `id` < 100\nmysql.table('table').having('id > 1 AND id < 100').select();\n```\n\t\n#### group(field)\n分组查询\n\n* `field` String 设定分组查询的字段\n* `return` this\n\n```js\n//SELECT * FROM `table` GROUP BY `date`\nmysql.table('table').group('date').select();\n```\n\t\n#### distinct(field)\n去重查询\n\n* `field` String 去重的字段\n* `return` this\n\n```js\n//SELECT DISTINCT `title` FROM `table`\nmysql.table('table').distinct('title').select();\n```\n\t\n#### where(where)\n设置where条件\n\n* `where` Sting|Object 查询条件\n* `return` this\n\n##### 普通条件\n\n\n```js\n//SELECT * FROM `table` WHERE `id` = 100;\nmysql.table('table').where('id = 100').select();\n//SELECT * FROM `table` WHERE `id` = 100;\nmysql.table('table').where({id: 100}).select();\n//SELECT * FROM `table` WHERE `id` = 100 OR `id` < 2\nmysql.table('table').where('id = 100 OR id < 2').select();\n//SELECT * FROM `table` WHERE `id` != 100\nmysql.table('table').where({id: ['!=', 100]})\n```\n\n##### EXP条件\n默认会对字段和值进行转义，如果不希望被转义，可是使用EXP的方式\n\n```js\n//SELECT * FROM `table` WHERE `name` = 'name'\nmysql.table('table').where({name: ['EXP', \"='name'\"]}).select();\n//UPDATE `table` SET `num' = `num`+1\nmysql.table('table').update({num: ['EXP', 'num+1']});\n```\n\t\t\n##### LIKE条件\n\n```js\n//SELECT * FROM `table` WHERE (`title` NOT LIKE 'title')\nmysql.table('table').where({title: ['NOT LIKE', 'title']}).select();\n//SELECT * FROM `table` WHERE (`title` LIKE '%title%')\nmysql.table('table').where({title: ['LIKE', '%title%']}).select();\n//LIKE多个值\n//SELECT * FROM `table` WHERE (`title` LIKE 'title' OR `title` LIKE 'name')\nmysql.table('table').where({title: ['LIKE', ['title', 'name']]}).select();\n//多个字段LIKE同一个值，OR的关系\n//SELECT * FROM `table` WHERE ((`title` LIKE '%title%') OR (`content` LIKE '%title%'))\nmysql.table('table').where({'title|content': ['LIKE', '%title%']}).select();\n//多个字段LIKE同一个值，AND的关系\n//SELECT * FROM `table` WHERE ((`title` LIKE '%title%') AND (`content` LIKE '%title%'))\nmysql.table('table').where({'title&content': ['LIKE', '%title%']}).select();\n```\n\t\t\n##### IN条件\n\n```js\n//SELECT * FROM `table` WHERE (`id` IN (1,2,3))\nmysql.table('table').where({id: ['IN', '1, 2, 3']}).select();\n//SELECT * FROM `table` WHERE (`id` IN (1, 2, 3))\nmysql.table('table').where({id: ['IN', [1, 2, 3]]}).select();\n//SELECT * FROM `table` WHERE (`id` NOT IN (1, 2, 3))\nmysql.table('table').where({id: ['NOT IN', [1, 2, 3]]}).select();\n```\n\t\t\n\t\t\n##### 多字段查询\n\n```js\n//SELECT * FROM `table` WHERE (`id` = 10) AND (`title` = 'title')\nmysql.table('table').where({id: 10, title: 'title'}).select();\n//OR\n//SELECT * FROM `table` WHERE (`id` = 10) OR (`title` = 'title')\nmysql.table('table').where({id: 10, title: 'title', _logic: 'OR'}).select();\n//XOR\n//SELECT * FROM `table` WHERE (`id` = 10) XOR (`title` = 'title')\nmysql.table('table').where({id: 10, title: 'title', _logic: 'XOR'}).select();\n```\n\t\n##### BETWEEN\n\n```js\n//SELECT * FROM `table` WHERE (`id` BETWEEN 1 AND 2)\nmysql.table('table').where({id: ['BETWEEN', 1, 2]}).select();\n//SELECT * FROM `table` WHERE (`id` BETWEEN 1 AND 2)\nmysql.table('table').where({id: ['BETWEEN', '1,2']}).select();\n```\n\t\t\n##### 复合查询\n\n```js\n//SELECT * FROM `table` WHERE `id` > 10 AND `id` < 20\nmysql.table('table').where({id: {\n\t'>': 10,\n\t'<': 20\n}}).select();\n//SELECT * FROM `table` WHERE `id` < 10 OR `id` > 20\nmysql.table('table').where({id: {\n\t'<': 10,\n\t'>': 20,\n\t_logic: 'OR'\n}}).select();\n//SELECT * FROM `table` WHERE (`id` > 10 AND `id` < 20) OR (`title` LIKE '%title%')\nmysql.table('table').where({id: {\n\t'>': 10,\n\t'<': 20\n}, title: ['LIKE', '%title%']}).select();\n//SELECT * FROM `table` WHERE (`title` = 'title') AND ((`id` IN (1, 2, 3)) OR (`content` = 'content'))\nmysql.table('table').where({\n\ttitle: 'title',\n\t_complex: {\n\t\tid: ['IN', [1, 2, 3]],\n\t\tcontent: 'content',\n\t\t_logic: 'OR'\n\t}\n}).select();\n```\n\t\t\n\t\t\n#### count(field)\n查询符合条件的数目\n\n* `field` String count的字段\n* `return` promise\n\n```js\n//SELECT COUNT(`id`) FROM `table` LIMIT 1\nmysql.table('table').count('id').then(function (count) {\n\t//count为符合条件的数目\t\t\n})\n```\n\t\t\n#### sum(field)\n求和\n\n* `field` String 要求和的字段\n* `return` promise\n\n```js\n//SELECT SUM(`num`) FROM `table` LIMIT 1\nmysql.table('table').sum('num').then(function (sum) {\n\t//sum为求和的值\t\n});\n```\n\t\t\n#### max(field)\n求字段的最大值\n\n* `field` String 要求最大值的字段\n* `return` promise\n\n```js\n//SELECT MAX(`num`) FROM `table` LIMIT 1\nmysql.table('table').max('num').then(function (max) {\t//max为num的最大值\n});\n```\n\t\t\n#### min(field)\n求字段的最小值\n\n* `field` String 要求最小值的字段\n* `return` promise\n\n```js\n//SELECT MIN(`num`) FROM `table` LIMIT 1\nmysql.table('table').min('num').then(function (min) {\n\t//min为num的最小值\t\n})\n```\n\n\t\t\n#### avg(field)\n求字段的平均值\n\n* `field` Sting 要求平均值的字段\n* `return` promise\n\n```js\n//SELECT AVG(`num`) FROM `table` LIMIT 1;\nmysql.table('table').avg('num').then(function (avg) {\n\t//avg为num的平均值\t\n})\n```\n\t\t\n#### add(data)\n插入数据\n\n* `data` Object 要插入的数据\n* `return` promise\n\n```js\nvar data  = {\n\ttitle: 'title',\n\tcontent: 'content'\n};\nmysql.table('table').add(data).then(function (insertId) {\n\t//如果插入成功，返回插入的id\n\t}).catch(function (err) {\n\t\t//插入失败，err为具体的错误信息\n\t})\n```\n\t\t\n#### thenAdd(data, where, returnDetail)\n当数据表中不存在where条件对应的数据时才进行插入\n\n* `data` Object 要插入的数据\n* `where` String|Array|Object 检测的条件\n* `returnDetail` Boolean 是否返回详细的信息\n\n```js\n//假设字段title为UNIQUE\nvar data = {\n\ttitle: 'title',\n\tcontent: 'content'\n};\nvar where = {\n\ttitle: 'title'\n}\nmysql.table('table').thenAdd(data, where).then(function (id) {\n\t//返回已经存在或者刚插入的id\n})\t\t\n//返回详细信息\nmysql.table('table').thenAdd(data, where, true).then(function (data) {\n\t/*\n\tdata数据结构为\n\t{\n\t\ttype: 'exist' || 'add',  //exist表示已存在，add新增\n\t\tid: 1\n\t}\n\t*/\t\n})\n```\n\n#### addAll(data)\n一次添加多条数据\n\n* `data` Array\n* `return` promise\n\n```js\nvar data = [{title: 'xxx'}, {title: 'yyy'}];\nmysql.table('table').addAll(data).then(function (insertId) {\n\t//插入成功\n}).catch(function (err) {\n\t//插入失败\n})\n```\n\t\t\n\t\t\n#### delete()\n删除数据\n\n* `return` promise\n\n```js\n//删除所有数据\nmysql.table('table').delete().then(function (affectRows) {\n\t//返回影响行数\n})\t\t\n//删除符合条件的数据\nmysql.table('table').where(where).delete().then(functino (affectRows) {\n\t//返回影响的行数\n})\n```\t\t\n\t\t\n#### update(data)\n更新数据，需要条件\n\n* `data` Object 要更新的数据\n* `return` promise\n\n```js\nmysql.table('table').where(where).update(data).then(function (affectRows) {\n\t//返回影响行数\n})\n```\n\t\t\n\n#### select()\n查询符合条件的数据\n\n* `return` promise\n\n```js\nmysql.table('table').where(where).select().then(function (data) {\n\t//返回结果 Array\n})\n```\n\n\t\t\n#### find()\n查找一条符合条件的数据\n\n* `return` promise\n\n```js\nmysql.table('table').where(where).find().then(function (data) {\n\t//返回结果 Object\n})\n```\n\t\t\n#### updateInc(field, step)\n字段值增加\n\n* `field` String 要增加的字段\n* `step` Number 增加的数值，默认为1\n* `return` promise\n\n```js\n//将id为1的num字段加10\nmysql.table('table').where({id: 1}).updateInc('num', 10).then(function () {\n})\n```\n\t\t\n#### updateDec(field, step)\n字段值减少\n\n* `field` String 要减少的字段\n* `step` Number 减少的数字，默认为1\n* `return` promise\n\n```js\n//将id为1的num字段值减10\nmysql.table('table').where({id: 1}).updateDec('num', 10).then(function () {\n})\n```\n\t\t\n#### getField(field, onlyOne)\n获取某个字段的值\n\n* `field` String 要获取的字段，可以是多个字段（用,隔开）\n* `onlyOne` Boolean|Array 是否只需要一个值，或者是需要几个值\n\n```js\n//取id>100的id集合\nmysql.table('table').where({id: ['>', 100]}).getField('id').then(function (data) {\n\t//data为Array，是符合结果的所有集合\n\t//data = [101, 102, 103, 104]\n})\t\t\n//只需要id>100的一个值\nmysql.table('table').where({id: ['>': 100]}).getField('id', true).then(function (data) {\n\t//data为数字，符合条件的第一个值\n\t//data = 101\n})\n//只需要id>100的3个值\nmysql.table('table').where({id: ['>' 100]}).getField('id', 3).then(function (data) {\n\t//data为Array\n\t//data = [101, 102, 103]\n})\n//需要id和title两个字段的值\nmysql.table('table').getField('id, title').then(function (data) {\n\t//data为对象\n\t/*\n\tdata = {\n\t\tid: [101, 102, 103, 104],\n\t\ttitle: ['aaaa', 'bbbb', 'cccc', 'dddd']\n\t}\n\t*/\n})\n```\n\t\t\n\t\t\n#### countSelect(options, flag)\n\n* `options` 查询参数\n* `flag` Boolean 当分页值不合法的时候，处理情况。true为修正到第一页，false为修正到最后一页，默认不进行修正\n* `return` promise\n\n```js\n//查询1-20条数据\nmysql.table('table').page(1, 20).countSelect().then(function (data) {\n\t//data数据格式\n\tdata = {\n\t\tcount: 123, //总条数\n\t\ttotal: 7    //总页数\n\t\tpage: 1     //当前页\n\t\tnum: 20     //每页显示数量\n\t\tdata： [{}, {}] //详细数据\n\t}\n});\n```\n\t\t\n\n#### query(sql, parse)\n自定义sql语句进行查询\n\n* `sql` String 要执行的sql语句\n* `parse` 格式参数的数据\n* `return` promise\n\n```js\nvar data = [\n\t'*',\n\t'table',\n\t'id > 100'\n]\t\nmysql.query('SELECT %s FROM %s WHERE %s', data).then(function (data) {\n})\n```\n\n#### execute(sql, parse)\n自定义sql语句执行，使用与query相同，返回数据不同，execute返回影响行数\n\n#### close()\n关闭连接池连接，非特殊情况，不建议使用\n\n\t\t\n\n\n\n\n\n\n\n\n\n\t\t\t\t\n\n\n\t\t\n\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n",
  "readmeFilename": "README.md",
  "_id": "node-mysql-promise@0.0.5",
  "dist": {
    "shasum": "79f9278ecc0dd35c32d3cbb987c04482893e5cc8"
  },
  "_from": "node-mysql-promise@0.0.5",
  "_resolved": "https://registry.npmjs.org/node-mysql-promise/-/node-mysql-promise-0.0.5.tgz"
}
